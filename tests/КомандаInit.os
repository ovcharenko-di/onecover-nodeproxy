#Использовать "../src/1coverage/src"
#Использовать logos
#Использовать cli
#Использовать asserts
#Использовать ParserFileV8i

Перем юТест;
Перем Лог;

Перем ИмяВременнойИБВСписке;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	// /FC:\ib
	// /F./ib
	// /Fib
	
	// /Sserver-1C\ib
	// /Sserver-1C-01;server-1C-02\ib
	
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_ФайловаяБаза_АбсолютныйПуть");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_ФайловаяБаза_ОтносительныйПутьТекКаталог");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_ФайловаяБаза_ОтносительныйПуть");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_СервернаяБаза");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_СервернаяБаза_Кластер");

	ВсеТесты.Добавить("ТестДолжен_ПроверитьПоискИд_v8i_НесколькоБазВСписке");

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	ВремТестер = Новый Тестер;
	Лог = Логирование.ПолучитьЛог(ВремТестер.ИмяЛога());
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт

	Парсер = Новый ПарсерСпискаБаз;
	СписокИБ = Парсер.ПолучитьСписокБаз();

	СписокИБ.Удалить(ИмяВременнойИБВСписке);
	Парсер.ЗаписатьСписокБаз(СписокИБ);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПоискИд_v8i_ФайловаяБаза_АбсолютныйПуть() Экспорт

	Приложение = Новый КонсольноеПриложение("1coverage", "");
	Приложение.Опция("v verbose", Ложь, "вывод отладочной информация в процессе выполнения")
					.Флаговый()
					.ВОкружении("1COVERAGE_VERBOSE");
	Приложение.Опция("C ib-connection ibconnection", "", "путь подключения к информационной базе")
					.ТСтрока()
					.ВОкружении("1COVERAGE_IB_CONNECTION 1COVERAGE_IBCONNECTION");

	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);

	ВходящиеАргументы = Новый Массив;
	ВходящиеАргументы.Добавить("-v");
	ВходящиеАргументы.Добавить("--ibconnection");
	ВходящиеАргументы.Добавить("./build/ib");

	Приложение.Запустить(ВходящиеАргументы);

	ИмяВременнойИБВСписке = "1coverage_test_fileib";
	ПутьКБазе = "D:\1C_base\ib";

	ВременнаяБаза = Новый Структура();

	СтрокаСоединения = Новый Структура();
	СтрокаСоединения.Вставить("String", "Connect=File=" + ПутьКБазе);
	СтрокаСоединения.Вставить("Structure", Новый Структура("File", ПутьКБазе));
	ВременнаяБаза.Вставить("Name", ИмяВременнойИБВСписке);
	ВременнаяБаза.Вставить("Connect", СтрокаСоединения);

	Парсер = Новый ПарсерСпискаБаз;

	СписокИБ = Парсер.ПолучитьСписокБаз();
	СписокИБ.Вставить(ИмяВременнойИБВСписке, ВременнаяБаза);

	Парсер.ЗаписатьСписокБаз(СписокИБ);

	Ожидаем.Что(1).Равно(1);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

КонецПроцедуры

Процедура ТестДолжен_ПроверитьПоискИд_v8i_ФайловаяБаза_ВКавычкахCПробелом() Экспорт

	Парсер = Новый ПарсерСпискаБаз;

	СписокИБ = Парсер.ПолучитьСписокБаз();

	// /F"D:\1C_base\ib"
	
	
КонецПроцедуры

// /FD:\1C_base\ZUPRAZR
	// /F "D:\1C_base\ib"
	// /F".\1C_base\ib"

Процедура ТестДолжен_ПроверитьЗапускТестовКаталога() Экспорт
	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьКаталог(Новый Файл(КаталогТестовыхФикстур()));
	
	ПроверитьРезультат(Тестер, РезультатТестирования);
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВыполнениеПараметризованныхТестов() Экспорт
	
	ПутьФайлаТеста = ОбъединитьПути(КаталогТестовыхФикстур(), "add.os");
	
	Тестер = Новый Тестер;
	РезультатТестирования = Тестер.ТестироватьФайл(Новый Файл(ПутьФайлаТеста));
	
	ПроверитьРезультат(Тестер, РезультатТестирования);
КонецПроцедуры

Процедура ПроверитьРезультат(Знач Тестер, Знач РезультатТестирования)
	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что Тестер.ПолучитьРезультатТестирования() равен РезультатТестирования, а получили другое значение")
		.Равно(РезультатТестирования);

	Ожидаем.Что(Тестер.ПолучитьРезультатТестирования(), 
		"Ожидали, что получим результат тестирования 0 ( `Прошел` ), а получили другое значение")
		.Равно(Тестер.ЗначенияСостоянияТестов().Прошел);
КонецПроцедуры

Функция КаталогТестовыхФикстур() Экспорт
	Возврат ОбъединитьПути(КаталогТестов(), "fixtures");
КонецФункции // КаталогИсходников()

Функция КаталогТестов() Экспорт
	Возврат ОбъединитьПути(КаталогИсходников(), "tests");
КонецФункции // КаталогИсходников()

Функция КаталогИсходников() Экспорт
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..");
КонецФункции // КаталогИсходников()