#Использовать "."
#Использовать cli
#Использовать fs

Перем Лог;

Процедура ВыполнитьПриложение()

	Приложение = Новый КонсольноеПриложение(ПараметрыПриложения.ИмяПриложения(),
											"Приложение для сбора замеров производительности платформы 1С и конвертации в формат GenericCoverage, lcov",
											ЭтотОбъект);
	Приложение.Версия("version", ПараметрыПриложения.Версия());
	Приложение.Опция("v8version", "8.3", "маска версии платформы 1С (8.3, 8.3.5, 8.3.6.2299 и т.п.)")
					.ВОкружении("1COVERAGE_V8VERSION");
	Приложение.Опция("v8path", "", "путь к исполняемому файлу платформы 1С (Например, /opt/1C/v8.3/x86_64/1cv8)")
	 				.ВОкружении("1COVERAGE_V8_PATH");
	Приложение.Опция("v verbose", Ложь, "вывод отладочной информация в процессе выполнения")
					.Флаговый()
					.ВОкружении("1COVERAGE_VERBOSE");

	Приложение.ДобавитьКоманду("init i", "Инициализация замера, настройка базы для сбора замеров",
								Новый КомандаInit);
	Приложение.ДобавитьКоманду("start", "Запуск прокси, открытие конфигуратора",
								Новый КомандаStart);
	Приложение.ДобавитьКоманду("stop", "Остановка замера и прокси-сервера, закрытие конфигуратора",
								Новый КомандаStop);
	Приложение.ДобавитьКоманду("convert c", "Конвертация лога замеров в файл выбранного формата",
								Новый КомандаConvert);

	Приложение.Запустить(АргументыКоманднойСтроки);

КонецПроцедуры

Процедура ПередВыполнениемКоманды(Знач Команда) Экспорт
	
	ВыводДополнительнойИнформации = Команда.ЗначениеОпции("verbose");
	
	ВерсияПлатформы = Команда.ЗначениеОпции("v8version");
	ПутьКПлатформе = Команда.ЗначениеОпции("v8path");
	
	ПараметрыПриложения.УстановитьРежимОтладкиПриНеобходимости(ВыводДополнительнойИнформации);

	Лог.Отладка("Устанавливаю общие параметры");
	ПараметрыПриложения.УстановитьПутьКПлатформе(ВерсияПлатформы);
	ПараметрыПриложения.УстановитьПутьКПлатформе(ПутьКПлатформе);
	
КонецПроцедуры

///////////////////////////////////////////////////////

Лог = ПараметрыПриложения.Лог();

Попытка

	ВыполнитьПриложение();

Исключение

	Лог.КритичнаяОшибка(ОписаниеОшибки());
	ЗавершитьРаботу(1);

КонецПопытки;
