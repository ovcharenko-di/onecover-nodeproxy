#Использовать xml-parser
#Использовать fs

Перем Лог;

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("src-path", "", "путь к исходному коду конфигурации")
				.ВОкружении("1COVERAGE_SRC_PATH GIT_PATH");

	Команда.Опция("log-path", "", "путь к файлам лога прокси-сервера")
				.ВОкружении("1COVERAGE_LOG_PATH");

	Команда.Опция("out o", "", "путь к каталогу с результатами конвертации")
				.ВОкружении("1COVERAGE_OUT_PATH");
				
	Команда.Опция("format f", "", "формат результата конвертации")
				.ВОкружении("1COVERAGE_OUT_PATH")
				.ТПеречисление()
				.Перечисление("GenericCoverage", "GenericCoverage", "GenericCoverage")
				.Перечисление("lcov", "lcov", "lcov");

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыПриложения.Лог();

	ОбщиеПараметры = ПараметрыПриложения.Параметры();

	КаталогИсходников = Команда.ЗначениеОпции("src-path");
	ЛогДляРазбора = Команда.ЗначениеОпции("log-path");
	КаталогРезультата = Команда.ЗначениеОпции("out");
	ФорматФайлаРезультата = Команда.ЗначениеОпции("format");

	Если Не ФС.ФайлСуществует(ЛогДляРазбора) Тогда

		Сообщить("Не найден файл лога");
		Возврат;

	КонецЕсли;

	КопияЛога = ПолучитьИмяВременногоФайла("log");
	КопироватьФайл(ЛогДляРазбора, КопияЛога);

	Конвертор = Новый Конвертор(КаталогИсходников);
	Конвертор.ОбработатьЛог(КопияЛога);

	Попытка
		УдалитьФайлы(КопияЛога);
	Исключение
		Сообщить("Не удалось удалить временный файл лога");
	КонецПопытки;
	
	Конвертор.СохранитьРезультат(КаталогРезультата, ФорматФайлаРезультата);
	
КонецПроцедуры // ВыполнитьКоманду
